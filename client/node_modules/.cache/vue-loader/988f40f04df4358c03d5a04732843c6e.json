{"remainingRequest":"/home/nicolas/KPM_Prakt/testapp/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/nicolas/KPM_Prakt/testapp/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nicolas/KPM_Prakt/testapp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nicolas/KPM_Prakt/testapp/client/src/components/Welcome.vue?vue&type=template&id=d4b7673c&scoped=true&","dependencies":[{"path":"/home/nicolas/KPM_Prakt/testapp/client/src/components/Welcome.vue","mtime":1654445365289},{"path":"/home/nicolas/KPM_Prakt/testapp/client/node_modules/cache-loader/dist/cjs.js","mtime":1651071370457},{"path":"/home/nicolas/KPM_Prakt/testapp/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1651071376714},{"path":"/home/nicolas/KPM_Prakt/testapp/client/node_modules/cache-loader/dist/cjs.js","mtime":1651071370457},{"path":"/home/nicolas/KPM_Prakt/testapp/client/node_modules/vue-loader/lib/index.js","mtime":1651071376714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}